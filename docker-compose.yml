services:
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8000:8000"
    depends_on:
      auth_db:
        condition: service_healthy
      auth_redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://user:pass@auth_db:5432/auth_db
      REDIS_URL: redis://auth_redis:6379
    volumes:
      - ./auth_service:/app
    restart: always
    networks:
      - backend_network

  auth_db:
    image: postgres:15
    container_name: auth_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend_network

  auth_pgadmin:
    image: dpage/pgadmin4
    container_name: auth_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - auth_pgadmin_data:/var/lib/pgadmin
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - backend_network

  auth_redis:
    image: redis:7
    container_name: auth_redis
    ports:
      - "6379:6379"
    volumes:
      - auth_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend_network

  catalog_service:
    build:
      context: ./catalog_service
      dockerfile: Dockerfile
    container_name: catalog_service
    ports:
      - "8001:8000"
    depends_on:
      catalog_db:
        condition: service_healthy
      catalog_redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://user:pass@catalog_db:5432/catalog_db
      REDIS_URL: redis://catalog_redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./catalog_service:/app
    restart: always
    networks:
      - backend_network

  catalog_db:
    image: postgres:15
    container_name: catalog_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: catalog_db
    ports:
      - "5434:5432"
    volumes:
      - catalog_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d catalog_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend_network

  catalog_pgadmin:
    image: dpage/pgadmin4
    container_name: catalog_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5051:80"
    volumes:
      - catalog_pgadmin_data:/var/lib/pgadmin
    depends_on:
      catalog_db:
        condition: service_healthy
    networks:
      - backend_network

  catalog_redis:
    image: redis:7
    container_name: catalog_redis
    ports:
      - "6380:6379"
    volumes:
      - catalog_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend_network

  orders_service:
    build:
      context: ./orders_service
      dockerfile: Dockerfile
    container_name: orders_service
    ports:
      - "8002:8000"
    depends_on:
      orders_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://user:pass@orders_db:5432/orders_db
    volumes:
      - ./orders_service:/app
    restart: always
    networks:
      - backend_network

  orders_db:
    image: postgres:15
    container_name: orders_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: orders_db
    ports:
      - "5435:5432"
    volumes:
      - orders_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orders_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend_network

  orders_pgadmin:
    image: dpage/pgadmin4
    container_name: orders_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5052:80"
    volumes:
      - orders_pgadmin_data:/var/lib/pgadmin
    depends_on:
      orders_db:
        condition: service_healthy
    networks:
      - backend_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: always
    networks:
      - backend_network

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - backend_network

volumes:
  auth_data:
  auth_pgadmin_data:
  auth_redis_data:
  catalog_data:
  catalog_redis_data:
  catalog_pgadmin_data:
  orders_data:
  orders_pgadmin_data:

networks:
  backend_network:
    driver: bridge
